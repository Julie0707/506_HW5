---
title: "hw5"
author: "jiaqi zhu"
format: 
  html:
    embed-resources: true
    code-overflow: wrap
editor: visual
---

GitHub repository：https://github.com/Julie0707/506_HW5

## Problem 1 - Plotting

a.  Produce a graph of the mean monthly temperature in celsius. Draw a scatter-plot where the x-axis is month and the y-axis is the average monthly temperature in celsius. Add a line connecting the points within each season and color the lines and points by season.

```{r}
library(ggplot2)
library(dplyr)
library(tidyr)

nnmaps_df <- read.csv("/Users/jiaqizhu/Downloads/chicago-nmmaps.csv")

# Convert temperature to Celsius
nnmaps_df$temp_celsius <- (nnmaps_df$temp - 32) * 5 / 9

# Ensure that 'month' is a factor and set the levels in order
nnmaps_df$month <- factor(nnmaps_df$month, levels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
                                                      "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))

# Calculate mean monthly temperature in Celsius
monthly_avg <- nnmaps_df %>%
  group_by(month, season) %>%
  summarise(mean_temp_celsius = mean(temp_celsius, na.rm = TRUE))

# Create the scatter plot
ggplot(monthly_avg, aes(x = month, y = mean_temp_celsius, group = season, color = season)) +
  geom_point() +
  geom_line() +
  scale_color_brewer(type = "qual") +
  labs(title = "Mean Monthly Temperature in Celsius by Season",
       x = "Month",
       y = "Average Temperature (°C)",
       color = "Season") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
# Calculate mean monthly values
monthly_avg <- nnmaps_df %>%
  group_by(month) %>%
  summarise(mean_temp_celsius = mean(temp_celsius, na.rm = TRUE),
            mean_o3 = mean(o3, na.rm = TRUE),
            mean_pm10 = mean(pm10, na.rm = TRUE),
            mean_dewpoint = mean(dewpoint, na.rm = TRUE))

monthly_avg_long <- monthly_avg %>%
  pivot_longer(cols = starts_with("mean_"), names_to = "variable", values_to = "value")

# Create the plot
ggplot(monthly_avg_long, aes(x = month, y = value, group = variable, color = variable)) +
  geom_line() +
  geom_point() +
  scale_color_brewer(palette = "Set1") +
  labs(title = "Mean Monthly Temperature, O3, PM10, and Dewpoint",
       x = "Month",
       y = "Mean Value",
       color = "Variable") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

"Which of the four variables seems to have the least seasonal trend?"

Dewpoint and Temperature in Celsius shows clear seasonal patterns, with higher temperatures in the summer months and lower temperatures in the winter/spring months.

O3 levels also exhibit some seasonal variation, though not as pronounced as temperature.

PM10 levels **fluctuate across the months**, but it's less clear if this fluctuation follows a seasonal trend.

Based on this observation, PM10 seems to exhibit the least distinct seasonal trend compared to temperature, O3, and dewpoint. Its fluctuations across the months do not follow a clear seasonal pattern as distinctly as the temperature.

## Problem 2 - OOP Programming

```{r}
library(methods)

# Define the poly class
#' Poly Class
#'
#' A class to represent polynomial expressions.
#' @slot coefficients numeric Coefficients of the polynomial.
#' @slot powers numeric Powers corresponding to each coefficient in the polynomial.
setClass("poly", 
         slots = c(coefficients = "numeric", powers = "numeric"))

# Constructor for the poly class
#' A constructor for the poly class.
#' @param coefficients numeric vector of coefficients.
#' @param powers numeric vector of powers.
#' @return An object of class \code{poly}.
#' @examples
#' p1 <- make_poly(c(3, 2), c(2, 0)) # 3x^2 + 2
#' p2 <- make_poly(c(7, -2, -1, 17), c(3, 2, 1, 0)) # 7x^3 - 2x^2 - x + 17
#' @export
make_poly <- function(coefficients, powers) {
  # Create a data frame for ease of manipulation
  poly_df <- data.frame(coefficients = coefficients, powers = powers)

  # Sum coefficients for like powers and sort by powers
  poly_df <- aggregate(coefficients ~ powers, data = poly_df, sum)
  poly_df <- poly_df[order(-poly_df$powers), ]

  # Create the poly object
  new("poly", coefficients = poly_df$coefficients, powers = poly_df$powers)
}

# Validator
setValidity("poly", function(object) {
  if(length(object@coefficients) != length(object@powers)) {
    return("Length of coefficients and powers should be the same")
  }
  TRUE
})

# Show method
#' Print Poly Object
#'
#' Method to print objects of the `poly` class.
#' @param object The `poly` object to be printed.
#' @export
setMethod("show", "poly", function(object) {
  terms <- mapply(function(coef, power) {
    term <- ""
    if (coef != 0) {
      # Determine the sign of the term
      sign <- ifelse(coef >= 0, " + ", " - ")
      
      abs_coef <- abs(coef)

      # Formatting the term based on its power
      if (power == 0) {  # Only display the coefficient for power 0
        term <- paste0(abs_coef)
      } else if (power == 1) {  # Display 'x' without power for power 1
        term <- paste0(abs_coef, "x")
      } else {  # Regular format for other powers
        term <- paste0(abs_coef, "x^", power)
      }

      # Prepend the sign for all terms except the first term
      if (!identical(terms, character(0))) {
        term <- paste0(sign, term)
      }
    }
    term
  }, object@coefficients, object@powers, SIMPLIFY = FALSE)
  
  terms <- terms[terms != ""]
  polynomial_string <- paste(terms, collapse = "")
  
  cat(polynomial_string, "\n")
})

# Addition method
#' Add Poly Objects
#'
#' Method to add two `poly` objects.
#' @param e1 The first `poly` object.
#' @param e2 The second `poly` object.
#' @return The sum of e1 and e2 as a new `poly` object.
#' @export
setMethod("+", c("poly", "poly"), function(e1, e2) {
  new_coefficients <- c(e1@coefficients, e2@coefficients)
  new_powers <- c(e1@powers, e2@powers)
  make_poly(new_coefficients, new_powers) # Simplification not handled
})

# Subtraction method
#' Subtract Poly Objects
#'
#' Method to subtract two `poly` objects.
#' @param e1 The first `poly` object.
#' @param e2 The second `poly` object.
#' @return The difference of e1 and e2 as a new `poly` object.
#' @export
setMethod("-", c("poly", "poly"), function(e1, e2) {
  new_coefficients <- c(e1@coefficients, -e2@coefficients)
  new_powers <- c(e1@powers, e2@powers)
  make_poly(new_coefficients, new_powers) 
})

# Test the class and methods
p1 <- make_poly(c(3, 2), c(2, 0)) # 3x^2 + 2
p2 <- make_poly(c(7, -2, -1, 17), c(3, 2, 1, 0)) # 7x^3 - 2x^2 - x + 17

p1
p2
p1 + p2
p1 - p2
```

## Problem 3 - data.table

a. Generate a table reporting the mean and median departure delay per airport. Generate a second table reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights.

```{r}
library(nycflights13)
library(data.table)
# Convert flights data to data.table
flights_dt <- as.data.table(flights)
airports_dt <- as.data.table(airports)

# Aggregate departure delays
dep_delay_agg <- flights_dt[, .(mean_dep_delay = mean(dep_delay, na.rm = TRUE),
                                median_dep_delay = median(dep_delay, na.rm = TRUE),
                                num_flights = .N), by = .(origin)]

# Filter for airports with at least 10 flights
dep_delay_agg <- dep_delay_agg[num_flights >= 10]

# Join with airport names and order
dep_delay_table <- dep_delay_agg[airports_dt, .(airport = name, mean_dep_delay, median_dep_delay), on = .(origin = faa)]
dep_delay_table <- dep_delay_table[!is.na(mean_dep_delay) & !is.na(median_dep_delay)]
dep_delay_table <- dep_delay_table[order(-mean_dep_delay)]

# Print the departure delay table
print(dep_delay_table, nrow = nrow(dep_delay_table))

# Aggregate arrival delays
arr_delay_agg <- flights_dt[, .(mean_arr_delay = mean(arr_delay, na.rm = TRUE),
                                median_arr_delay = median(arr_delay, na.rm = TRUE),
                                num_flights = .N), by = .(dest)]

# Filter for airports with at least 10 flights
arr_delay_agg <- arr_delay_agg[num_flights >= 10]

# Join with airport names and order
arr_delay_table <- arr_delay_agg[airports_dt, .(airport = name, mean_arr_delay, median_arr_delay), on = .(dest = faa)]
arr_delay_table <- arr_delay_table[!is.na(mean_arr_delay) & !is.na(median_arr_delay)]
arr_delay_table <- arr_delay_table[order(-mean_arr_delay)]

# Print the arrival delay table
print(arr_delay_table, nrow = nrow(arr_delay_table))

```

b.  How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entires for the model, average speed (in MPH) and number of flights.

```{r}
flights_dt <- as.data.table(flights)
planes_dt <- as.data.table(planes)

fastest_aircraft_model <- flights_dt[
  # Join with planes_dt data
  planes_dt, on = "tailnum", nomatch = 0
  ][
  # Compute time in hours and mph
  , .(time = air_time / 60, distance = distance, model = model)
  ][
  # Compute mph
  , mph := distance / time
  ][
  # Group by model and calculate average mph and number of flights
  , .(avgmph = mean(mph, na.rm = TRUE), nflights = .N), by = .(model)
  ][
  # Arrange in descending order of avgmph and get the top row
  order(-avgmph)
  ][1]

fastest_aircraft_model
```